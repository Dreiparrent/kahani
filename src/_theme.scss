@import '~@angular/material/theming';
// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat-core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$kahani-primary: mat-palette($mat-deep-purple);
$kahani-accent:  mat-palette($mat-pink, A200, A100, A400);

// The warn palette is optional (defaults to red).
$kahani-warn:    mat-palette($mat-red);

// Create the theme object (a Sass map containing all of the palettes).
$kahani-theme: mat-light-theme($kahani-primary, $kahani-accent, $kahani-warn);

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include angular-material-theme($kahani-theme);
$theme-map: (
    primary: $kahani-primary,
    accent: $kahani-accent,
    warn: $kahani-warn
);

@function getColor($theme: primary, $variation: 500) {
    @if map-has-key($map: $theme-map, $key: $theme) {
        $theme: map-get($map: $theme-map, $key: $theme);
        @return mat-color($theme, $variation);
        // @return map-get($map: $kahani-theme, $key: $theme);
    } @else {
        @error "Invalid $theme: `#{$theme}` in map `#{map-keys($map: $kahani-theme)}`";
    }
}

// @mixin getColor($type: 'primary', $variation...) {
//     $warn: false !default;
//     @if $type == 'primary' {
//         $type: $kahani-primary;
//     } @else {
//         $type: map-get($map: $kahani-theme, accent)
//     }
//     @if map-has-key($map: $kahani-theme, $key: $type) {
//         $map: map-get($map: $themecolors, $key: $map);
//     map-get($type, variation)
// }
// @function themeColor($map, $variation...) {
//     $warn: false !default;
//     @if map-has-key($map: $themecolors, $key: $map) {
//         $map: map-get($map: $themecolors, $key: $map);
//     } @else {
//         $warn: $map;
//         $map: map-get($map: $themecolors, $key: accent);
//     }
//     @if length($variation) > 0 {
//         @if $warn {
//             @error "Invalid $map `#{$warn}`, with set $variation `#{$variation}`";
//         }
//         @each $var in $variation {
//             @if not map-has-key($map, $var) {
//                 @error "Invalid $variation: `#{$var}` in map `#{map-keys($map: $map)}`";
//             } @else {
//                $map: map-get($map: $map, $key: $var);
//             }
//         }
//         @return $map;
//     }
//     @return map-get($map: $map, $key: 500);
// }